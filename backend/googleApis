import logging
import azure.functions as func
import pickle
import os.path
import json
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request



# If modifying these scopes, delete the file token.pickle.
#SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']
SCOPES = ['https://www.googleapis.com/auth/calendar']





# Methode, die alle Kalender von einem User zurückliefert 
def get_calendar_metainfos(service): 
    result = service.calendarList().list().execute() 
    print('hallo') 

# Liefert die MetaInformationen für einen bestimmten Kalender
def get_metainfos_of_specific_calendar(service):
    result = service.calendarList().get(calendarId = '7a5dq767oegsavhuhv81cf5rebetukv7@import.calendar.google.com').execute()
    print ('hallo')

# Liefert alle Events eines Kalenders 
def get_events(service):
    result = service.events().list(calendarId = '7a5dq767oegsavhuhv81cf5rebetukv7@import.calendar.google.com', maxResults = 500).execute() 
    print ('hello')

def get_free_time(service): 

    body = {
    "timeMin": "2020-06-22T07:00:00-0800",
    "timeMax": "2020-06-30T21:00:00-0800",
    "timeZone": "Mesz",
    "groupExpansionMax": 2,
    "calendarExpansionMax": 10,
    "items": [
        {
        "id": "pc5vkhkac03oggcnvlkve5e2f8@group.calendar.google.com"
        }
    ]
    } 

    result = service.freebusy().query(body = body).execute()

    return result
  
    

# Liefert die Metadaten zu einem Kalender 
def get_list(service): 
    calendar = service.calendars().get(calendarId='pc5vkhkac03oggcnvlkve5e2f8@group.calendar.google.com').execute()

    print (calendar['etag'])
 
# Führt ein Update auf ein Kalenderelement durch // Muss noch ausformuliert werden  braucht eine Kalender ID und Event ID
def update_calendar(service):
   # First retrieve the event from the API.
    event = service.events().get(calendarId='pc5vkhkac03oggcnvlkve5e2f8@group.calendar.google.com', eventId='eventId').execute()

    event['summary'] = 'Appointment at Somewhere'

    updated_event = service.events().update(calendarId='primary', eventId=event['id'], body=event).execute()

    # Print the updated date.
    print (updated_event['updated'])


# Liefert alle Einträge aus einem Kalender und gibt diese aus 
def get_calendar_list(service):
    page_token = None
     
    #while True:
    events = service.events().list(calendarId='pc5vkhkac03oggcnvlkve5e2f8@group.calendar.google.com', pageToken=page_token).execute()
    for event in events['items']:
        try:
            print(event['summary'])
        except KeyError: 
            print('Es gab ein KeyError')
            pass
        #page_token = events.get('nextPageToken')
        #if not page_token:
        #    break


# Basierend auf "natürlicher Sprache" wird im Kalender ein Event erstellt     
def quick_add(service):
    created_event = service.events().quickAdd(
    calendarId='pc5vkhkac03oggcnvlkve5e2f8@group.calendar.google.com',
    text='Appointment at Somewhere on June 5th 2020 10am-10:25am').execute()

    print (created_event['id'])

# Erstellt ein Elemet im Kalender 
def create_event(service): 
    event = {
    'summary': 'Google I/O 2015',
    'location': '800 Howard St., San Francisco, CA 94103',
    'description': 'A chance to hear more about Google\'s developer products.',
    'start': {
        'dateTime': '2020-05-28T09:00:00-07:00',
        'timeZone': 'America/Los_Angeles',
    },
    'end': {
        'dateTime': '2020-05-28T17:00:00-07:00',
        'timeZone': 'America/Los_Angeles',
    },
    'recurrence': [
        'RRULE:FREQ=DAILY;COUNT=0'
    ],
    'attendees': [
        {'email': 'lpage@example.com'},
        {'email': 'sbrin@example.com'},
    ],
    'reminders': {
        'useDefault': False,
        'overrides': [
        {'method': 'email', 'minutes': 24 * 60},
        {'method': 'popup', 'minutes': 10},
        ],
    },
    }

    event = service.events().insert(calendarId='pc5vkhkac03oggcnvlkve5e2f8@group.calendar.google.com', body=event).execute()
    print ('Event created: %s' % (event.get('htmlLink')))



def get_upcoming_events(service): 
    #print(type(service))
    # Call the Calendar API
    now = datetime.datetime.utcnow().isoformat() + 'Z' # 'Z' indicates UTC time
    print('Getting the upcoming 10 events')
    events_result = service.events().list(calendarId='pc5vkhkac03oggcnvlkve5e2f8@group.calendar.google.com', timeMin=now,
                                        maxResults=15, singleEvents=True,
                                        orderBy='startTime').execute()
    events = events_result.get('items', [])


    if not events:
        print('No upcoming events found.')
    for event in events:
        start = event['start'].get('dateTime', event['start'].get('date'))
        print(start, event['summary'])





def main(req: func.HttpRequest) -> func.HttpResponse:

    """Shows basic usage of the Google Calendar API.
    Prints the start and name of the next 10 events on the user's calendar.
    """
    # Am Anfang wird ein Service Objekt erzeugt, welches für alle API-Calls genutzt wird
    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    #service = build('calendar', 'v3', credentials=creds)

    #Serviceaufruf 
    #result = get_free_time(service)

    logging.info('Python HTTP trigger function processed a request.')

    name = req.params.get('name')
    if not name:
        try:
            req_body = req.get_json()
        except ValueError:
            pass
        else:
            name = req_body.get('name')
    answer = json.dumps(result)
    if name:
        return func.HttpResponse(body=answer)
    else:
        return func.HttpResponse(body=answer,
             status_code=200
        )
