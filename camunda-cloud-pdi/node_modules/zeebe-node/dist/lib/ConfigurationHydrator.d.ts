import { ZBClientOptions } from './interfaces-published-contract';
import { OAuthProviderConfig } from './OAuthProvider';
export declare class ConfigurationHydrator {
    static configure(gatewayAddress: string | undefined, options: ZBClientOptions | undefined): {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        password: string;
        username: string;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
        password: string;
        username: string;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
        password: string;
        username: string;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
        password: string;
        username: string;
    } | {
        eagerConnection: boolean;
        useTLS: any;
        connectionTolerance?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        loglevel?: "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
        stdout?: import("./interfaces-published-contract").ZBCustomLogger | undefined;
        retry?: boolean | undefined;
        maxRetries?: number | undefined;
        maxRetryTimeout?: number | undefined;
        oAuth?: OAuthProviderConfig | undefined;
        basicAuth?: {
            username: string;
            password: string;
        } | undefined;
        logNamespace?: string | undefined;
        longPoll?: number | import("typed-duration").Milliseconds | import("typed-duration").Seconds | import("typed-duration").Minutes | import("typed-duration").Hours | import("typed-duration").Days | undefined;
        camundaCloud?: import("./interfaces-published-contract").CamundaCloudConfig | undefined;
        hostname: string | undefined;
        port: string;
        onReady?: (() => void) | undefined;
        onConnectionError?: (() => void) | undefined;
        url: string;
        audience: string;
        clientId: string;
        clientSecret: string;
        cacheOnDisk?: boolean | undefined;
        cacheDir?: string | undefined;
        password: string;
        username: string;
    };
    static readonly getLogLevelFromEnv: () => "INFO" | "DEBUG" | "NONE" | "ERROR" | undefined;
    private static readonly DEFAULT_GATEWAY_PORT;
    private static readonly CAMUNDA_CLOUD_AUTH_SERVER;
    private static readonly getClientIdFromEnv;
    private static readonly getZeebeAddressFromEnv;
    private static readonly getClientSecretFromEnv;
    private static readonly getTlsFromEnv;
    private static readTLSFromEnvironment;
    private static readOAuthFromEnvironment;
    private static readBasicAuthFromEnvironment;
    private static readCamundaClusterConfFromEnv;
    private static getGatewayFromEnvironment;
    private static decodeConnectionString;
    private static getCamundaCloudConfig;
    private static justClusterId;
    private static getEagerStatus;
}
