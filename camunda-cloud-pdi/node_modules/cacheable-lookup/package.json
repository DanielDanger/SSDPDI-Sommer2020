{
  "_args": [
    [
      {
        "raw": "cacheable-lookup@^5.0.3",
        "scope": null,
        "escapedName": "cacheable-lookup",
        "name": "cacheable-lookup",
        "rawSpec": "^5.0.3",
        "spec": ">=5.0.3 <6.0.0",
        "type": "range"
      },
      "C:\\Users\\Tobias\\OneDrive\\Dokumente\\Hochschule_Master\\PDI\\Camunda\\camunda-cloud-pdi\\node_modules\\got"
    ]
  ],
  "_from": "cacheable-lookup@^5.0.3",
  "_hasShrinkwrap": false,
  "_id": "cacheable-lookup@5.0.3",
  "_location": "/cacheable-lookup",
  "_nodeVersion": "14.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cacheable-lookup_5.0.3_1589205653888_0.3739318147341064"
  },
  "_npmUser": {
    "name": "szmarczak",
    "email": "sz.marczak@gmail.com"
  },
  "_npmVersion": "6.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cacheable-lookup@^5.0.3",
    "scope": null,
    "escapedName": "cacheable-lookup",
    "name": "cacheable-lookup",
    "rawSpec": "^5.0.3",
    "spec": ">=5.0.3 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/got"
  ],
  "_resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.3.tgz",
  "_shasum": "049fdc59dffdd4fc285e8f4f82936591bd59fec3",
  "_shrinkwrap": null,
  "_spec": "cacheable-lookup@^5.0.3",
  "_where": "C:\\Users\\Tobias\\OneDrive\\Dokumente\\Hochschule_Master\\PDI\\Camunda\\camunda-cloud-pdi\\node_modules\\got",
  "author": {
    "name": "Szymon Marczak"
  },
  "bugs": {
    "url": "https://github.com/szmarczak/cacheable-lookup/issues"
  },
  "dependencies": {},
  "description": "A cacheable dns.lookup(…) that respects the TTL",
  "devDependencies": {
    "@types/keyv": "^3.1.1",
    "ava": "^3.8.2",
    "benchmark": "^2.1.4",
    "coveralls": "^3.0.9",
    "keyv": "^4.0.0",
    "nyc": "^15.0.0",
    "proxyquire": "^2.1.3",
    "quick-lru": "^5.1.0",
    "tsd": "^0.11.0",
    "xo": "^0.25.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-W+JBqF9SWe18A72XFzN/V/CULFzPm7sBXzzR6ekkE+3tLG72wFZrBiBZhrZuDoYexop4PHJVdFAKb/Nj9+tm9w==",
    "shasum": "049fdc59dffdd4fc285e8f4f82936591bd59fec3",
    "tarball": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.3.tgz",
    "fileCount": 5,
    "unpackedSize": 23976,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeuVqdCRA9TVsSAnZWagAAEb0P/RbtzjrM5+HEZGwDs2Ri\nNhgIOCNXgLwruoQiJrktPB4BjpOgOJddekrH/HwrHBnUGONC/e/6i+nHP1mH\nxjH9eVMS47m4dctYNoG3R6O5f4SY1XIyiMOYMAwR/p4iUyCNSVVvn7MxfeY4\n+7BwYjDkTkXe0LM3bfnBcTwLe/IL2G9Fy3vh7wPaQzeiN7M5xGXi5IncaEb6\nda6SyeqeGSU0kihFCTySEBiGMtgUrEmYaaWIh3oBNJaJvIIYHNSz6ENjg3+8\n5+AT8ls51a1hzxJzUp3SnXqGv/VthFYyakt4wULMT04W4i3znSUcwLBhVz7P\nj5uWkGjU3iVqTTQnPHP2x6H/2RRMN96zxoYDAij05q3ar4g0oLpoQirTYoL7\nc3O+OrGhHnIQK+5mJEbmqO4v53ewlmQRCh7E7NBR+uYHCihFusSigOPaDShu\nM/1ekS+xTlwfOXsDmNI54UZl6pSoW9f63TSACo431Ncd57ajnbtriZJLI9nG\nyEeASx7vFznToxxl92EK6HOdKcgelY9VtuPkKJtVfoj5oXw+OhqlrN+us2U8\nauvLJIrjSju4xAcrnoKDPrOckp+7nY9nyBKoc+coNdT81PMBmNQ81z1eg2zw\naPej3CKL03x+i2AM0k6L/99fj3smlhB9YcCcjB+qfAIt8fVyvO6T8wR7nJ/s\nvvkh\r\n=qMQk\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=10"
  },
  "files": [
    "source",
    "index.d.ts"
  ],
  "gitHead": "c46a5771d9d3a6a59537ecf6b7de786faab5eb98",
  "homepage": "https://github.com/szmarczak/cacheable-lookup#readme",
  "keywords": [
    "dns",
    "lookup",
    "cacheable",
    "ttl"
  ],
  "license": "MIT",
  "main": "source/index.js",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    },
    {
      "name": "szmarczak",
      "email": "sz.marczak@gmail.com"
    }
  ],
  "name": "cacheable-lookup",
  "optionalDependencies": {},
  "readme": "# cacheable-lookup\n\n> A cacheable [`dns.lookup(…)`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback) that respects TTL :tada:\n\n[![Node CI](https://github.com/szmarczak/cacheable-lookup/workflows/Node%20CI/badge.svg)](https://github.com/szmarczak/cacheable-lookup/actions)\n[![Coverage Status](https://coveralls.io/repos/github/szmarczak/cacheable-lookup/badge.svg?branch=master)](https://coveralls.io/github/szmarczak/cacheable-lookup?branch=master)\n[![npm](https://img.shields.io/npm/dm/cacheable-lookup.svg)](https://www.npmjs.com/package/cacheable-lookup)\n[![install size](https://packagephobia.now.sh/badge?p=cacheable-lookup)](https://packagephobia.now.sh/result?p=cacheable-lookup)\n\nMaking lots of HTTP requests? You can save some time by caching DNS lookups :zap:\n\n## Usage\n\n### Using the `lookup` option\n\n```js\nconst http = require('http');\nconst CacheableLookup = require('cacheable-lookup');\n\nconst cacheable = new CacheableLookup();\n\nhttp.get('http://example.com', {lookup: cacheable.lookup}, response => {\n\t// Handle the response here\n});\n```\n\n### Attaching CacheableLookup to an Agent\n\n```js\nconst http = require('http');\nconst CacheableLookup = require('cacheable-lookup');\n\nconst cacheable = new CacheableLookup();\ncacheable.install(http.globalAgent);\n\nhttp.get('http://example.com', response => {\n\t// Handle the response here\n});\n```\n\n## API\n\n### new CacheableLookup(options)\n\nReturns a new instance of `CacheableLookup`.\n\n#### options\n\nType: `object`<br>\nDefault: `{}`\n\nOptions used to cache the DNS lookups.\n\n##### cache\n\nType: `Map` | [`Keyv`](https://github.com/lukechilds/keyv/)<br>\nDefault: `new Map()`\n\nCustom cache instance. If `undefined`, it will create a new one.\n\n**Note**: If you decide to use Keyv instead of the native implementation, the performance will drop by 10x. Memory leaks may occur as it doesn't provide any way to remove all the deprecated values at once.\n\n**Tip**: [`QuickLRU`](https://github.com/sindresorhus/quick-lru) is fully compatible with the Map API, you can use it to limit the amount of cached entries. Example:\n\n```js\nconst http = require('http');\nconst CacheableLookup = require('cacheable-lookup');\nconst QuickLRU = require('quick-lru');\n\nconst cacheable = new CacheableLookup({\n\tcache: new QuickLRU({maxSize: 1000})\n});\n\nhttp.get('http://example.com', {lookup: cacheable.lookup}, response => {\n\t// Handle the response here\n});\n```\n\n##### options.maxTtl\n\nType: `number`<br>\nDefault: `Infinity`\n\nThe maximum lifetime of the entries received from the specifed DNS server (TTL in seconds).\n\nIf set to `0`, it will make a new DNS query each time.\n\n**Pro Tip**: This shouldn't be lower than your DNS server response time in order to prevent bottlenecks. For example, if you use Cloudflare, this value should be greater than `0.01`.\n\n##### options.fallbackDuration\n\nType: `number`<br>\nDefault: `3600` (1 hour)\n\nWhen the DNS server responds with `ENOTFOUND` or `ENODATA` and the OS reports that the entry is available, it will use `dns.lookup(...)` directly for the requested hostnames for the specified amount of time (in seconds).\n\nIf you don't query internal hostnames (such as `localhost`, `database.local` etc.), it is strongly recommended to set this value to `0`.\n\n##### options.errorTtl\n\nType: `number`<br>\nDefault: `0.15`\n\nThe time how long it needs to remember queries that threw `ENOTFOUND` or `ENODATA` (TTL in seconds).\n\n**Note**: This option is independent, `options.maxTtl` does not affect this.\n\n**Pro Tip**: This shouldn't be lower than your DNS server response time in order to prevent bottlenecks. For example, if you use Cloudflare, this value should be greater than `0.01`.\n\n##### options.resolver\n\nType: `dns.Resolver | dns.promises.Resolver`<br>\nDefault: [`new dns.promises.Resolver()`](https://nodejs.org/api/dns.html#dns_class_dns_resolver)\n\nAn instance of [DNS Resolver](https://nodejs.org/api/dns.html#dns_class_dns_resolver) used to make DNS queries.\n\n##### options.lookup\n\nType: `Function`<br>\nDefault: [`dns.lookup`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback)\n\nThe fallback function to use when the DNS server responds with `ENOTFOUND` or `ENODATA`.\n\n**Note**: This has no effect if the `fallbackDuration` option is less than `1`.\n\n### Entry object\n\nType: `object`\n\n#### address\n\nType: `string`\n\nThe IP address (can be an IPv4 or IPv6 address).\n\n#### family\n\nType: `number`\n\nThe IP family (`4` or `6`).\n\n##### expires\n\nType: `number`\n\n**Note**: This is not present when falling back to `dns.lookup(...)`!\n\nThe timestamp (`Date.now() + ttl * 1000`) when the entry expires.\n\n#### ttl\n\n**Note**: This is not present when falling back to `dns.lookup(...)`!\n\nThe time in seconds for its lifetime.\n\n### Entry object (callback-style)\n\nWhen `options.all` is `false`, then `callback(error, address, family, expires, ttl)` is called. <br>\nWhen `options.all` is `true`, then `callback(error, entries)` is called.\n\n### CacheableLookup instance\n\n#### servers\n\nType: `Array`\n\nThe DNS servers used to make queries. Can be overridden - doing so will clear the cache.\n\n#### [lookup(hostname, options, callback)](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback)\n\n#### lookupAsync(hostname, options)\n\nThe asynchronous version of `dns.lookup(…)`.\n\nReturns an [entry object](#entry-object).<br>\nIf `options.all` is true, returns an array of entry objects.\n\n##### hostname\n\nType: `string`\n\n##### options\n\nType: `object`\n\nThe same as the [`dns.lookup(…)`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback) options.\n\n#### query(hostname)\n\nAn asynchronous function which returns cached DNS lookup entries.<br>\nThis is the base for `lookupAsync(hostname, options)` and `lookup(hostname, options, callback)`.\n\n**Note**: This function has no options.\n\nReturns an array of objects with `address`, `family`, `ttl` and `expires` properties.\n\n#### queryAndCache(hostname)\n\nAn asynchronous function which makes two DNS queries: A and AAAA. The result is cached.<br>\nThis is used by `query(hostname)` if no entry in the database is present.\n\nReturns an array of objects with `address`, `family`, `ttl` and `expires` properties.\n\n#### updateInterfaceInfo()\n\nUpdates interface info. For example, you need to run this when you plug or unplug your WiFi driver.\n\n**Note:** Running `updateInterfaceInfo()` will trigger `clear()` only on network interface removal.\n\n#### clear(hostname?)\n\nClears the cache for the given hostname. If the hostname argument is not present, the entire cache will be emptied.\n\n## High performance\n\nPerformed on:\n- Query: `example.com`\n- CPU: i7-7700k\n- CPU governor: performance\n\n```\nCacheableLookup#lookupAsync                x 2,896,251 ops/sec ±1.07% (85 runs sampled)\nCacheableLookup#lookupAsync.all            x 2,842,664 ops/sec ±1.11% (88 runs sampled)\nCacheableLookup#lookupAsync.all.ADDRCONFIG x 2,598,283 ops/sec ±1.21% (88 runs sampled)\nCacheableLookup#lookup                     x 2,565,913 ops/sec ±1.56% (85 runs sampled)\nCacheableLookup#lookup.all                 x 2,609,039 ops/sec ±1.01% (86 runs sampled)\nCacheableLookup#lookup.all.ADDRCONFIG      x 2,416,242 ops/sec ±0.89% (85 runs sampled)\ndns#lookup                                 x 7,272     ops/sec ±0.36% (86 runs sampled)\ndns#lookup.all                             x 7,249     ops/sec ±0.40% (86 runs sampled)\ndns#lookup.all.ADDRCONFIG                  x 5,693     ops/sec ±0.28% (85 runs sampled)\nFastest is CacheableLookup#lookupAsync.all\n```\n\n## Related\n\n - [cacheable-request](https://github.com/lukechilds/cacheable-request) - Wrap native HTTP requests with RFC compliant cache support\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/szmarczak/cacheable-lookup.git"
  },
  "scripts": {
    "test": "xo && nyc --reporter=lcovonly --reporter=text ava && tsd"
  },
  "types": "index.d.ts",
  "version": "5.0.3"
}
