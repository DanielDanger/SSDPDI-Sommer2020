{
  "_args": [
    [
      {
        "raw": "typed-duration@^1.0.12",
        "scope": null,
        "escapedName": "typed-duration",
        "name": "typed-duration",
        "rawSpec": "^1.0.12",
        "spec": ">=1.0.12 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Tobias\\OneDrive\\Dokumente\\Hochschule Master\\PDI\\Camunda\\camunda-cloud-pdi\\node_modules\\zeebe-node"
    ]
  ],
  "_from": "typed-duration@^1.0.12",
  "_hasShrinkwrap": false,
  "_id": "typed-duration@1.0.13",
  "_location": "/typed-duration",
  "_nodeVersion": "12.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/typed-duration_1.0.13_1588930345921_0.3218126531253056"
  },
  "_npmUser": {
    "name": "sitapati",
    "email": "josh@magikcraft.io"
  },
  "_npmVersion": "6.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "typed-duration@^1.0.12",
    "scope": null,
    "escapedName": "typed-duration",
    "name": "typed-duration",
    "rawSpec": "^1.0.12",
    "spec": ">=1.0.12 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/zeebe-node"
  ],
  "_resolved": "https://registry.npmjs.org/typed-duration/-/typed-duration-1.0.13.tgz",
  "_shasum": "a40f9ba563b6e20674cac491e15ecbf6811d85a7",
  "_shrinkwrap": null,
  "_spec": "typed-duration@^1.0.12",
  "_where": "C:\\Users\\Tobias\\OneDrive\\Dokumente\\Hochschule Master\\PDI\\Camunda\\camunda-cloud-pdi\\node_modules\\zeebe-node",
  "author": {
    "name": "Josh Wulf",
    "email": "josh@magikcraft.io"
  },
  "bugs": {
    "url": "https://github.com/jwulf/typed-duration/issues"
  },
  "dependencies": {},
  "description": "Zero-dependency typed duration library for JavaScript",
  "devDependencies": {
    "@types/jest": "^25.1.4",
    "jest": "^25.1.0",
    "ts-jest": "^25.2.1",
    "typescript": "^3.8.3"
  },
  "directories": {
    "lib": "lib",
    "dist": "dist"
  },
  "dist": {
    "integrity": "sha512-HLwA+hNq/2eXe03isJSfa7YJt6NikplBGdNKvlhyuR6WL5iZi2uXJIZv1SSOMEIukCZbeQ8QwIcQ801S0/Qulw==",
    "shasum": "a40f9ba563b6e20674cac491e15ecbf6811d85a7",
    "tarball": "https://registry.npmjs.org/typed-duration/-/typed-duration-1.0.13.tgz",
    "fileCount": 6,
    "unpackedSize": 14633,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJetScqCRA9TVsSAnZWagAAVdUP/0IgPJpGxUcAmdGhfpAn\n7XWI9uoZMM5rDVyAVgla3VCkcJeXdnqzKQaPpLYP4eH8S+8aL+Z3ivPn1UJx\nje4HzzvtVqLB64KVJp3Mz++EyClB++o9VX83763R32EpPifq3L5mAX0CUPMx\nRX48fAY4YEEHubOVQeFkfbZKmaLv7eDG8STS96nscM8FnHwXOCMhFvjGzdXk\nUFizMD2Juy+CEul6KrI1rA23u6I56ehod+0JuXp+c18fCqiP0XUoD+QLkvRH\nGc1OIj5iPmebH5iT1b7ieSmYrrtqtWu85jTvvAJES453jCrGq/xUKl2rGZWt\ng156cXjPtnhxpW9QEP5xltUEo6fW8VftNd6qBrwlUPpKl1MsZXNd9OyjDgX4\n3asBNjMQHLMi0vMjRcB7h7ixRzYHjYTPbKC8W5k7Cv3baSoJIIOb0THgINRd\nlxJCXZh282ppxP1gEfZ9EouvORbo620C/liHxfBGAchfp3oYoxaHBa/+O+OM\nZfgI9XzcqNwOcUHTvv7OocDz2Ct+srMN9WltHABMDrVoVCuF8Phe61a3WuQ+\n7D+Qhki++C8Ba49GhO/2v61sqdFKYY+3s7fU+PihtVfkgUzJH2ZiJe8aZ1gV\nkwcPWzYTXUYyIkB06MjM5v1uVQp1K2L8XJBZAOsu3FaAuK4WRo0fCkWhEqyr\nBZaL\r\n=Alvo\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist",
    "package.json",
    "README.md"
  ],
  "gitHead": "2f7fa2b58130cbf048066731fc1bec3f308cf026",
  "homepage": "https://github.com/jwulf/typed-duration#readme",
  "keywords": [
    "duration",
    "time",
    "type-safe",
    "typescript",
    "value typed"
  ],
  "license": "ISC",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "sitapati",
      "email": "josh@magikcraft.io"
    }
  ],
  "name": "typed-duration",
  "optionalDependencies": {},
  "readme": "# Typed Duration \n\n![Node.js CI](https://github.com/jwulf/typed-duration/workflows/Node.js%20CI/badge.svg)\n[![npm version](https://badge.fury.io/js/typed-duration.svg)](https://badge.fury.io/js/typed-duration)\n\nA Zero-dependency typed duration library for JavaScript/TypeScript. Express and convert time durations with type-safety. \n\nThis library uses [Value Object Typing](https://medium.com/@hannespetri/type-safe-value-objects-in-typescript-d1b119c4f5cd) to allow you to express time durations in a type-safe way, and perform conversion between different units.\n\n## Installation \n\nInstall the library to your project:\n\n```\nnpm i typed-duration\n```\n\n## Use \n\nConsider the following code:\n\n```TypeScript\nsetTimeout(doSomething, 1000)\n```\n\nIt's pretty clear that these are milliseconds, because you know the API. Typically, developers might do something like:\n\n```TypeScript\nsetTimeout(doSomething, 5 * 60 * 1000) // In Five Minutes\n```\n\nWith this library, you can do this: \n\n```TypeScript\nimport { Duration } from 'typed-duration'\nconst { milliseconds, minutes } = Duration\n\nconst period = minutes.of(5)\n\nsetTimeout(doSomething, milliseconds.from(period)) // Every Five Minutes\n```\n\nWell, that looks like more code. Yes, it is. It is also _more semantically expressive_ of the programmer's intent, which makes it _better for maintenance_.\n\nThe situation is exacerbated when you expose a programming API that takes a time duration as a `number`. We all know that `setTimeout` takes milliseconds, but how do you communicate to consumers of your API what the time units are for `timeout` in _your_ API call?\n\nYou should, of course, document it, and put it in JSDoc comments so that they can get hinting in their IDE. \n\nYou could call it `timeoutSeconds` to make it clear that it expects seconds.\n\nOr you could make it take a `TimeDuration` and allow them to pass in whatever they want, and convert it to the units you need, like this:\n\n```TypeScript\nimport { Duration, TimeDuration } from 'typed-duration'\n\nfunction executeLater(fn: () => void, delay: TimeDuration) {\n    setTimeout(fn, Duration.milliseconds.from(delay))\n}\n```\n\nNow, consumers of this function can call it like this:\n\n```TypeScript\nimport { Duration } from 'typed-duration'\nconst { milliseconds, seconds, minutes, hours, days } = Duration\n\n// After 2.5 seconds\nexecuteLater(doSomething, milliseconds.of(2500))\n\n// After 10 seconds\nexecuteLater(doSomething, seconds.of(10))\n\n// After 15 minutes\nexecuteLater(doSomething, minutes.of(15))\n\n// After 3 hours\nexecuteLater(doSomething, hours.of(3))\n\n// After 6 days\nexecuteLater(doSomething, days.of(6))\n```\n\n**#winning**\n\n## Backward-compatible API \n\nIf you have an existing API you want to add this to, you can use the `MaybeTimeDuration` type, like this:\n\n```TypeScript\nimport { Duration, MaybeTimeDuration } from 'typed-duration'\n\nfunction executeLater(fn: () => void, period: MaybeTimeDuration) {\n    setTimeout(fn, Duration.milliseconds.from(period))\n}\n\n// You can pass in a typed duration, and it will convert to a number of milliseconds\nexecuteLater(doSomething, Duration.seconds.from(20))\n\n// a number will be allowed by the MaybeTimeDuration type\n// and the milliseconds.from() call will simply pass it through\nexecuteLater(doSomething, 2500)\n```\n\n## Logging\n\nYou can log times for user information in the format that the user specified them, including units, with `Duration.value.of`. You can supply an optional default unit to be used for untyped numbers (if you don't, it will just print the number). \n\nFor example:\n\n```TypeScript\nimport { Duration, MaybeTimeDuration } from 'typed-duration'\n\nfunction executeLater(fn: () => void, delay: MaybeTimeDuration) {\n    console.log(`Executing in ${Duration.value.of(delay, \"ms\")}...`)\n    setTimeout(fn, Duration.milliseconds.from(delay))\n}\n\nexecuteLater(doSomething, Duration.seconds.from(20))\n// Executing in 20s...\n\nexecuteLater(doSomething, Duration.milliseconds.from(350))\n// Executing in 350ms...\n\nexecuteLater(doSomething, Duration.hours.from(3))\n// Executing in 3h...\n\nexecuteLater(doSomething, 2500)\n// Executing in 2500ms...\n```\n\n## Feature Requests, Bug Reports\n\nSee the [GitHub repo](https://github.com/jwulf/typed-duration).",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jwulf/typed-duration.git"
  },
  "scripts": {
    "prepublishOnly": "jest && tsc",
    "test": "jest"
  },
  "version": "1.0.13"
}
