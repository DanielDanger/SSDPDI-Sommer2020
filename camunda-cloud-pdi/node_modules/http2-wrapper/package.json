{
  "_args": [
    [
      {
        "raw": "http2-wrapper@^1.0.0-beta.4.5",
        "scope": null,
        "escapedName": "http2-wrapper",
        "name": "http2-wrapper",
        "rawSpec": "^1.0.0-beta.4.5",
        "spec": ">=1.0.0-beta.4.5 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Tobias\\OneDrive\\Dokumente\\Hochschule_Master\\PDI\\Camunda\\camunda-cloud-pdi\\node_modules\\got"
    ]
  ],
  "_from": "http2-wrapper@^1.0.0-beta.4.5",
  "_hasShrinkwrap": false,
  "_id": "http2-wrapper@1.0.0-beta.4.6",
  "_location": "/http2-wrapper",
  "_nodeVersion": "14.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/http2-wrapper_1.0.0-beta.4.6_1589140591512_0.581673227358505"
  },
  "_npmUser": {
    "name": "szmarczak",
    "email": "sz.marczak@gmail.com"
  },
  "_npmVersion": "6.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "http2-wrapper@^1.0.0-beta.4.5",
    "scope": null,
    "escapedName": "http2-wrapper",
    "name": "http2-wrapper",
    "rawSpec": "^1.0.0-beta.4.5",
    "spec": ">=1.0.0-beta.4.5 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/got"
  ],
  "_resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.0-beta.4.6.tgz",
  "_shasum": "9438f0fceb946c8cbd365076c228a4d3bd4d0143",
  "_shrinkwrap": null,
  "_spec": "http2-wrapper@^1.0.0-beta.4.5",
  "_where": "C:\\Users\\Tobias\\OneDrive\\Dokumente\\Hochschule_Master\\PDI\\Camunda\\camunda-cloud-pdi\\node_modules\\got",
  "author": {
    "name": "Szymon Marczak"
  },
  "ava": {
    "timeout": "2m"
  },
  "bugs": {
    "url": "https://github.com/szmarczak/http2-wrapper/issues"
  },
  "dependencies": {
    "quick-lru": "^5.0.0",
    "resolve-alpn": "^1.0.0"
  },
  "description": "HTTP2 client, just with the familiar `https` API",
  "devDependencies": {
    "@sindresorhus/is": "^2.0.0",
    "ava": "^3.3.0",
    "benchmark": "^2.1.4",
    "coveralls": "^3.0.9",
    "get-stream": "^5.1.0",
    "got": "^11.0.2",
    "lolex": "^6.0.0",
    "many-keys-map": "^1.0.2",
    "nyc": "^15.0.0",
    "p-event": "^4.1.0",
    "tempy": "^0.4.0",
    "to-readable-stream": "^2.1.0",
    "tsd": "^0.11.0",
    "xo": "^0.26.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-9oB4BiGDTI1FmIBlOF9OJ5hwJvcBEmPCqk/hy314Uhy2uq5TjekUZM8w8SPLLlUEM+mxNhXdPAXfrJN2Zbb/GQ==",
    "shasum": "9438f0fceb946c8cbd365076c228a4d3bd4d0143",
    "tarball": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.0-beta.4.6.tgz",
    "fileCount": 13,
    "unpackedSize": 48325,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeuFxvCRA9TVsSAnZWagAAVRcP/A4vh4WLqY3UwSxPOnWR\nd/IZSUiMuDHGrgpWEPGUglp5h30WSqliFRuPZm9K5tP3TTxYIw3yy2HAtM+e\nOWDE0qYJy9V6rSghDdWw5CX5d51BZLxQo66suZvGoZ4amIsPYcLf0yNBSCmH\nWVIiedXWsA/1k6ZX6Pcnx3IP6aYX2rarjvEsaVR9AFixUqEnlnHOE1Nr79v7\ndMKB58gBz8LZG9cpEhrNk4KRv1dPhoh9K6eKrd/ZPnSsgmBYlutAtvYRmZXY\nxu7dJOkfSWrPp7tJ4CCbQmcehCBybjve5GYpl8UOo5k4en40raCHRDa81+f4\nS2CiDSrzUaMFbo7SY6CA9qgn0eIPrhlYK7ksYY+veO46vssaXehn1PoVEUyh\nAiq7ogU0dqr9B+6DaqYpcc+cR7kCTizUM8IeboIa7GBn4DdCv+3kQq8U7abI\n3McokyU7waN0j+W9EIG8DQWb0rTGeSUSSDX9thFjcnum9afCAen5qx5OfxAJ\ncZ3YBihqW2RiVbMxt6tvTB9xgrTi2jvHn+JUtT/EfpZ07TPMtNr13w95UIvD\nHd1ZiVZ+ZiRsJAPys2fqqxj9sT7MIqkb+H6lMzDEaVzxLGwVUIMHIrwHFh4S\nVO59LxsvO9XFbkgmZ3GHC/HEdrJUjeH0oMsNdWczEEUEcft3PiClrZDYTlBw\ngRu6\r\n=cy8h\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=10.19.0"
  },
  "files": [
    "source"
  ],
  "gitHead": "1d67f716852a670a082a27a5c434317bc3e042e1",
  "homepage": "https://github.com/szmarczak/http2-wrapper#readme",
  "keywords": [
    "http2",
    "https",
    "http",
    "request"
  ],
  "license": "MIT",
  "main": "source",
  "maintainers": [
    {
      "name": "szmarczak",
      "email": "sz.marczak@gmail.com"
    }
  ],
  "name": "http2-wrapper",
  "optionalDependencies": {},
  "readme": "# http2-wrapper\n> HTTP2 client, just with the familiar `https` API\n\n[![Node CI](https://github.com/szmarczak/http2-wrapper/workflows/Node%20CI/badge.svg)](https://github.com/szmarczak/http2-wrapper/actions)\n[![Coverage Status](https://coveralls.io/repos/github/szmarczak/http2-wrapper/badge.svg?branch=master)](https://coveralls.io/github/szmarczak/http2-wrapper?branch=master)\n[![npm](https://img.shields.io/npm/dm/http2-wrapper.svg)](https://www.npmjs.com/package/http2-wrapper)\n[![install size](https://packagephobia.now.sh/badge?p=http2-wrapper)](https://packagephobia.now.sh/result?p=http2-wrapper)\n\nThis package was created to support HTTP2 without the need to rewrite your code.<br>\nI recommend adapting to the [`http2`](https://nodejs.org/api/http2.html) module if possible - it's much simpler to use and has many cool features!\n\n**Tip**: `http2-wrapper` is very useful when you rely on other modules that use the HTTP1 API and you want to support HTTP2.\n\n**Pro Tip**: While the native `http2` doesn't have agents yet, you can use `http2-wrapper` Agents and still operate on the native HTTP2 streams.\n\n## Installation\n\n> `$ npm install http2-wrapper`<br>\n> `$ yarn add http2-wrapper`\n\n## Usage\n```js\nconst http2 = require('http2-wrapper');\n\nconst options = {\n\thostname: 'nghttp2.org',\n\tprotocol: 'https:',\n\tpath: '/httpbin/post',\n\tmethod: 'POST',\n\theaders: {\n\t\t'content-length': 6\n\t}\n};\n\nconst request = http2.request(options, response => {\n\tconsole.log('statusCode:', response.statusCode);\n\tconsole.log('headers:', response.headers);\n\n\tconst body = [];\n\tresponse.on('data', chunk => {\n\t\tbody.push(chunk);\n\t});\n\tresponse.on('end', () => {\n\t\tconsole.log('body:', Buffer.concat(body).toString());\n\t});\n});\n\nrequest.on('error', e => console.error(e));\n\nrequest.write('123');\nrequest.end('456');\n\n// statusCode: 200\n// headers: [Object: null prototype] {\n//   ':status': 200,\n//   date: 'Fri, 27 Sep 2019 19:45:46 GMT',\n//   'content-type': 'application/json',\n//   'access-control-allow-origin': '*',\n//   'access-control-allow-credentials': 'true',\n//   'content-length': '239',\n//   'x-backend-header-rtt': '0.002516',\n//   'strict-transport-security': 'max-age=31536000',\n//   server: 'nghttpx',\n//   via: '1.1 nghttpx',\n//   'alt-svc': 'h3-23=\":4433\"; ma=3600',\n//   'x-frame-options': 'SAMEORIGIN',\n//   'x-xss-protection': '1; mode=block',\n//   'x-content-type-options': 'nosniff'\n// }\n// body: {\n//   \"args\": {},\n//   \"data\": \"123456\",\n//   \"files\": {},\n//   \"form\": {},\n//   \"headers\": {\n//     \"Content-Length\": \"6\",\n//     \"Host\": \"nghttp2.org\"\n//   },\n//   \"json\": 123456,\n//   \"origin\": \"xxx.xxx.xxx.xxx\",\n//   \"url\": \"https://nghttp2.org/httpbin/post\"\n// }\n```\n\n## API\n\n**Note:** The `session` option was renamed to `tlsSession` for better readability.\n\n### http2.auto(url, options, callback)\n\nPerforms [ALPN](https://nodejs.org/api/tls.html#tls_alpn_and_sni) negotiation.\nReturns a Promise giving proper `ClientRequest` instance (depending on the ALPN).\n\n**Note**: The `agent` option represents an object with `http`, `https` and `http2` properties.\n\n```js\nconst http2 = require('http2-wrapper');\n\nconst options = {\n\thostname: 'httpbin.org',\n\tprotocol: 'http:', // Note the `http:` protocol here\n\tpath: '/post',\n\tmethod: 'POST',\n\theaders: {\n\t\t'content-length': 6\n\t}\n};\n\n(async () => {\n\ttry {\n\t\tconst request = await http2.auto(options, response => {\n\t\t\tconsole.log('statusCode:', response.statusCode);\n\t\t\tconsole.log('headers:', response.headers);\n\n\t\t\tconst body = [];\n\t\t\tresponse.on('data', chunk => body.push(chunk));\n\t\t\tresponse.on('end', () => {\n\t\t\t\tconsole.log('body:', Buffer.concat(body).toString());\n\t\t\t});\n\t\t});\n\n\t\trequest.on('error', console.error);\n\n\t\trequest.write('123');\n\t\trequest.end('456');\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n})();\n\n// statusCode: 200\n// headers: { connection: 'close',\n//   server: 'gunicorn/19.9.0',\n//   date: 'Sat, 15 Dec 2018 18:19:32 GMT',\n//   'content-type': 'application/json',\n//   'content-length': '259',\n//   'access-control-allow-origin': '*',\n//   'access-control-allow-credentials': 'true',\n//   via: '1.1 vegur' }\n// body: {\n//   \"args\": {},\n//   \"data\": \"123456\",\n//   \"files\": {},\n//   \"form\": {},\n//   \"headers\": {\n//     \"Connection\": \"close\",\n//     \"Content-Length\": \"6\",\n//     \"Host\": \"httpbin.org\"\n//   },\n//   \"json\": 123456,\n//   \"origin\": \"xxx.xxx.xxx.xxx\",\n//   \"url\": \"http://httpbin.org/post\"\n// }\n```\n\n### http2.auto.protocolCache\n\nAn instance of [`quick-lru`](https://github.com/sindresorhus/quick-lru) used for ALPN cache.\n\nThere is a maximum of 100 entries. You can modify the limit through `protocolCache.maxSize` - note that the change will be visible globally.\n\n### http2.request(url, options, callback)\n\nSame as [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback).\n\n##### options.h2session\n\nType: `Http2Session`<br>\n\nThe session used to make the actual request. If none provided, it will use `options.agent`.\n\n### http2.get(url, options, callback)\n\nSame as [`https.get`](https://nodejs.org/api/https.html#https_https_get_options_callback).\n\n### new http2.ClientRequest(url, options, callback)\n\nSame as [`https.ClientRequest`](https://nodejs.org/api/https.html#https_class_https_clientrequest).\n\n### new http2.IncomingMessage(socket)\n\nSame as [`https.IncomingMessage`](https://nodejs.org/api/https.html#https_class_https_incomingmessage).\n\n### new http2.Agent(options)\n\n**Note:** this is **not** compatible with the classic `http.Agent`.\n\nUsage example:\n\n```js\nconst http2 = require('http2-wrapper');\n\nclass MyAgent extends http2.Agent {\n\tcreateConnection(origin, options) {\n\t\tconsole.log(`Connecting to ${http2.Agent.normalizeOrigin(origin)}`);\n\t\treturn http2.Agent.connect(origin, options);\n\t}\n}\n\nhttp2.get({\n\thostname: 'google.com',\n\tagent: new MyAgent()\n}, res => {\n\tres.on('data', chunk => console.log(`Received chunk of ${chunk.length} bytes`));\n});\n```\n\n#### options\n\nEach option is assigned to each `Agent` instance and can be changed later.\n\n##### timeout\n\nType: `number`<br>\nDefault: `60000`\n\nIf there's no activity after `timeout` milliseconds, the session will be closed.\n\n##### maxSessions\n\nType: `number`<br>\nDefault: `Infinity`\n\nThe maximum amount of sessions per origin.\n\n##### maxFreeSessions\n\nType: `number`<br>\nDefault: `1`\n\nThe maximum amount of free sessions per origin.\n\n##### maxCachedTlsSessions\n\nType: `number`<br>\nDefault: `100`\n\nThe maximum amount of cached TLS sessions.\n\n#### Agent.normalizeOrigin(url)\n\nReturns a string representing the origin of the URL.\n\n#### agent.settings\n\nType: `object`<br>\nDefault: `{enablePush: false}`\n\n[Settings](https://nodejs.org/api/http2.html#http2_settings_object) used by the current agent instance.\n\n#### agent.normalizeOptions([options](https://github.com/szmarczak/http2-wrapper/blob/master/source/agent.js))\n\nReturns a string representing normalized options.\n\n```js\nAgent.normalizeOptions({servername: 'example.com'});\n// => ':example.com'\n```\n\n#### agent.getSession(origin, options)\n\n##### [origin](https://nodejs.org/api/http2.html#http2_http2_connect_authority_options_listener)\n\nType: `string` `URL` `object`\n\nAn origin used to create new session.\n\n##### [options](https://nodejs.org/api/http2.html#http2_http2_connect_authority_options_listener)\n\nType: `object`\n\nThe options used to create new session.\n\nReturns a Promise giving free `Http2Session`. If no free sessions are found, a new one is created.\n\n#### agent.getSession([origin](#origin), [options](options-1), listener)\n\n##### listener\n\nType: `object`\n\n```\n{\n\treject: error => void,\n\tresolve: session => void\n}\n```\n\nIf the `listener` argument is present, the Promise will resolve immediately. It will use the `resolve` function to pass the session.\n\n#### agent.request([origin](#origin), [options](#options-1), [headers](https://nodejs.org/api/http2.html#http2_headers_object))\n\nReturns a Promise giving `Http2Stream`.\n\n#### agent.createConnection([origin](#origin), [options](#options-1))\n\nReturns a new `TLSSocket`. It defaults to `Agent.connect(origin, options)`.\n\n#### agent.closeFreeSessions()\n\nMakes an attempt to close free sessions. Only sessions with 0 concurrent streams will be closed.\n\n#### agent.destroy(reason)\n\nDestroys **all** sessions.\n\n#### Event: 'session'\n\n```js\nagent.on('session', session => {\n\t// A new session has been created by the Agent.\n});\n```\n\n## Notes\n\n - If you're interested in [WebSockets over HTTP2](https://tools.ietf.org/html/rfc8441), then [check out this discussion](https://github.com/websockets/ws/issues/1458).\n - [HTTP2 sockets cannot be malformed](https://github.com/nodejs/node/blob/cc8250fab86486632fdeb63892be735d7628cd13/lib/internal/http2/core.js#L725), therefore modifying the socket will have no effect.\n - You can make [a custom Agent](examples/push-stream/index.js) to support push streams.\n\n## Benchmarks\n\nCPU: Intel i7-7700k (governor: performance)<br>\nServer: H2O v2.2.5 [`h2o.conf`](h2o.conf)<br>\nNode: v13.8.0\n\n`auto` means `http2wrapper.auto`.\n\n```\nhttp2-wrapper                         x 12,417 ops/sec ±3.72% (83 runs sampled)\nhttp2-wrapper - preconfigured session x 14,517 ops/sec ±1.39% (83 runs sampled)\nhttp2-wrapper - auto                  x 11,373 ops/sec ±3.17% (84 runs sampled)\nhttp2                                 x 16,172 ops/sec ±1.21% (85 runs sampled)\nhttps         - auto - keepalive      x 13,251 ops/sec ±3.84% (79 runs sampled)\nhttps                - keepalive      x 13,158 ops/sec ±2.88% (78 runs sampled)\nhttps                                 x 1,618 ops/sec  ±2.07%  (82 runs sampled)\nhttp                                  x 5,922 ops/sec  ±2.87%  (79 runs sampled)\nFastest is http2\n```\n\n`http2-wrapper`:\n- 23% less performant than `http2`\n- 6% less performant than `https - keepalive`\n- 110% more performant than `http`\n\n`http2-wrapper - preconfigured session`:\n- 10% less performant than `http2`\n- 10% more performant than `https - keepalive`\n- 145% more performant than `http`\n\n`http2-wrapper - auto`:\n- 30% less performant than `http2`\n- 14% less performant than `https - keepalive`\n- 92% more performant than `http`\n\n`https - auto - keepalive`:\n- 18% less performant than `http2`\n- as performant as `https - keepalive`\n- 124% more performant than `http`\n\n## Related\n\n - [`got`](https://github.com/sindresorhus/got) - Simplified HTTP requests\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/szmarczak/http2-wrapper.git"
  },
  "scripts": {
    "test": "xo && nyc --reporter=lcovonly --reporter=text ava"
  },
  "version": "1.0.0-beta.4.6"
}
